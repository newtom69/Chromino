@using Data.Enumeration;
@using  Data.ViewModel;

@model GameVM;
@{
    Layout = null;
    ViewData["Title"] = "Chromino - Jouer !";
    string playerTurn = "";
    Dictionary<string, int> pseudosExceptCurrentPlayer_Chrominos = new Dictionary<string, int>(Model.PseudosChrominos);
    pseudosExceptCurrentPlayer_Chrominos.Remove(ViewBag.PlayerPseudo);
}

<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>@ViewData["Title"]</title>
    <link rel="stylesheet" href="~/lib/bootstrap/dist/css/bootstrap.min.css" />
    <link rel="stylesheet" href="~/css/site.css" />
</head>

<body>
    <div id="toolbar">
        <a class="btn btn-toolbar btn-home" asp-area="" asp-controller="Home" asp-action="Index"></a>
        <button class="btn btn-toolbar btn-infogame" onclick="ShowPopup('#infoPopup');"></button>

        @if (!Model.OpponenentsAreBots)
        {
            <button class="btn btn-toolbar btn-chat" onclick="ShowPopup('#ChatPopup');">
                <p id="NotifChat" class="notification" style="display:none"></p>
            </button>
        }
        <button class="btn btn-toolbar btn-memo" onclick="ShowPopup('#MemoPopup');"></button>
        @if (Model.Game.Status == GameStatus.InProgress || Model.Game.Status == GameStatus.SingleInProgress)
        {
            if (Model.PlayerPseudoTurn == ViewBag.PlayerPseudo)
            {
                playerTurn = "C'est à vous de jouer";
                @if (Model.ChrominosInStack > 0 && (!Model.GamePlayerTurn.PreviouslyDraw || pseudosExceptCurrentPlayer_Chrominos.Count == 0))
                {
                    <form id="FormDrawChromino" asp-action="DrawChromino" style="display:none">
                        <input name="playerId" value="@ViewBag.PlayerId" />
                        <input name="gameId" value="@Model.Game.Id" />
                    </form>
                    <button type="submit" form="FormDrawChromino" class="btn btn-toolbar btn-draw"></button>
                }
                else if (pseudosExceptCurrentPlayer_Chrominos.Count > 0)
                {
                    <form id="FormPassTurn" asp-action="PassTurn" style="display:none">
                        <input name="playerId" value="@ViewBag.PlayerId" />
                        <input name="gameId" value="@Model.Game.Id" />
                    </form>
                    <button type="submit" form="FormPassTurn" class="btn btn-toolbar btn-skip"></button>
                }
            }
            else
            {
                playerTurn = $"C'est à {@Model.PlayerPseudoTurn} de jouer";
            }
        }
        @if ((Model.Game.Status == GameStatus.SingleInProgress || Model.Game.Status == GameStatus.InProgress) && Model.PlayerIdTurn == ViewBag.PlayerId &&
       (Model.IdentifiedPlayerChrominosVM.Count != 1 || Model.IdentifiedPlayerChrominosVM[0].SquaresViewModel[1].Color != Color.Cameleon))
        {
            <button class="btn btn-toolbar btn-play" onclick="PlayChromino();"></button>
        }

        @if (!Model.BotsId.Contains(Model.PlayerIdTurn) && Model.PlayerPseudoTurn != ViewBag.PlayerPseudo)
        {
            <form id="FormNextGame" asp-action="NextToPlay" style="display:none">
            </form>
            <button type="submit" form="FormNextGame" class="btn btn-toolbar btn-nextgame"></button>
        }

    </div>
    <br>
    <div id="gameArea">
        <div id="PlayerHistory">
            <div id="previousNextButton">
                <div id="previousButton"></div>
                <div id="nextButton"></div>
                <div id="PlayerHistoryPseudo"></div>
            </div>
        </div>
        @for (int j = 0; j < Model.LinesNumber; j++)
        {
            <div class="gameLineArea">
                @for (int i = 0; i < Model.ColumnsNumber; i++)
                {
                    int index = i + j * Model.ColumnsNumber;
                    Color state = Model.SquaresViewModel[index].Color;
                    if (state != Color.None)
                    {
                        string classColor = state.ToString();
                        string classOpenSides = "Square Open";
                        if (Model.SquaresViewModel[index].OpenRight)
                            classOpenSides += "Right";
                        if (Model.SquaresViewModel[index].OpenBottom)
                            classOpenSides += "Bottom";
                        if (Model.SquaresViewModel[index].OpenLeft)
                            classOpenSides += "Left";
                        if (Model.SquaresViewModel[index].OpenTop)
                            classOpenSides += "Top";
                        <div id="Grid_@index" class="@classOpenSides @classColor"></div>
                    }
                    else
                    {
                        string classCloseEdge = "Square ";
                        if (i < Model.ColumnsNumber - 1 && Model.SquaresViewModel[i + 1 + j * Model.ColumnsNumber].Color != Color.None)
                        {
                            classCloseEdge += " CloseRight";
                        }
                        if (j < Model.LinesNumber - 1 && Model.SquaresViewModel[i + (j + 1) * Model.ColumnsNumber].Color != Color.None)
                        {
                            classCloseEdge += " CloseBottom";
                        }
                        if (i > 0 && Model.SquaresViewModel[i - 1 + j * Model.ColumnsNumber].Color != Color.None)
                        {
                            classCloseEdge += " CloseLeft";
                        }
                        if (j > 0 && Model.SquaresViewModel[i + (j - 1) * Model.ColumnsNumber].Color != Color.None)
                        {
                            classCloseEdge += " CloseTop";
                        }
                        <div class="@classCloseEdge"></div>
                    }
                }
            </div>
        }
    </div>
    @foreach (ChrominoVM chrominosViewModel in Model.IdentifiedPlayerChrominosVM)
    {
        string id = chrominosViewModel.ChrominoId.ToString();
        <div id="@id" class="handPlayerChromino">
            @for (int i = 0; i < 3; i++)
            {
                string classOpenSides;
                switch (i)
                {
                    case 0:
                        classOpenSides = "OpenRight";
                        break;
                    case 1:
                        classOpenSides = "OpenRightLeft";
                        break;
                    case 2:
                    default:
                        classOpenSides = "OpenLeft";
                        break;
                }
                Color state = chrominosViewModel.SquaresViewModel[i].Color;
                string classColor = state.ToString();
                <div class="Square @classOpenSides @classColor"></div>
            }
        </div>
    }
    <form id="FormSendMove" asp-action="Play" hidden>
        <input id="FormPlayerId" name="playerId" value="@ViewBag.PlayerId" />
        <input id="FormGameId" name="gameId" value="@Model.Game.Id" />
        <input id="FormChrominoId" name="chrominoId" />
        <input id="FormX" name="x" />
        <input id="FormY" name="y" />
        <input id="FormOrientation" name="orientation" />
    </form>

    <script>
    PreviouslyDraw = @Model.GamePlayerTurn.PreviouslyDraw.ToString().ToLower();
    @{string thisPlayerTurn = (Model.PlayerIdTurn == ViewBag.PlayerId).ToString().ToLower();}
    ThisPlayerTurn = @thisPlayerTurn;
        Squares = new Array;
        Pseudos = new Array;
    @{
        byte move = (byte)(Model.Game.Move - 1);
        for (int iChromino = 0; iChromino < Model.ChrominosPlayedVM.Count; iChromino++)
        {
            if (move == 0)
                break;
            while (move > Model.ChrominosPlayedVM[iChromino].Move)
            {
                string playerPass = Model.Pseudos[(move - 1) % Model.Pseudos.Count] + " a passé";
                @:Pseudos.push("@playerPass");
                for (int i = 0; i < 3; i++)
                {
                    @:Squares.push("Na");
                }
                move--;
            }
            @:Pseudos.push("@Model.Pseudos[(move - 1) % Model.Pseudos.Count]");
            for (int i = 0; i < 3; i++)
            {
                int index = Model.ChrominosPlayedVM[iChromino].IndexesX[i] + Model.ChrominosPlayedVM[iChromino].IndexesY[i] * Model.ColumnsNumber;
                @:Squares.push("Grid_" + @index);
            }
            move--;
        }
    }
    </script>


    @if (Model.BotsId.Contains(Model.PlayerIdTurn) && Model.Game.Status != GameStatus.Finished)
    {
        <script>
            window.onload = function () { playBot(); }

            function playBot() {
                location.assign("@Url.Action("PlayBot", "Game", new { id = Model.Game.Id, botId = Model.PlayerIdTurn})");
            }
        </script>
    }

    <script src="~/lib/jquery/dist/jquery.min.js"></script>
    <script src="~/lib/bootstrap/dist/js/bootstrap.bundle.min.js"></script>
    <script src="~/js/jquery.draggableTouch.js"></script>
    <script src="~/js/jquery.popupoverlay.min.js"></script>
    <script src="~/js/game.js" asp-append-version="true"></script>

    @{
        int horizontal = (int)Orientation.Horizontal;
        int horizontalFlip = (int)Orientation.HorizontalFlip;
        int vertical = (int)Orientation.Vertical;
        int verticalFlip = (int)Orientation.VerticalFlip;
    }
    <script>
        var GameAreaLinesNumber = @Model.LinesNumber;
        var GameAreaColumnsNumber = @Model.ColumnsNumber;
        var XMin = @Model.XMin;
        var YMin = @Model.YMin;
        var Horizontal = @horizontal;
        var HorizontalFlip = @horizontalFlip;
        var Vertical = @vertical;
        var VerticalFlip = @verticalFlip;
        var NotReadMessages = @Model.GamePlayerIdentified.NotReadMessages;
    </script>
</body>
</html>

@if (TempData["ShowInfos"] != null || (!Model.GamePlayerTurn.PreviouslyDraw && TempData["PlayReturn"] == null && (pseudosExceptCurrentPlayer_Chrominos.ContainsValue(1) || pseudosExceptCurrentPlayer_Chrominos.ContainsValue(0))))
{
    <script>
        $(document).ready(function () {
            ShowPopup('#infoPopup');
        });
    </script>
}
else
{
    <script>
        $(document).ready(function () {
            HidePopup('#infoPopup');
        });
    </script>
}

<div id="infoPopup" style="display:none">
    <img src="~/image/Info.svg" height="65" width="65" alt="info" />
    @if (Model.Game.Status == GameStatus.Finished || Model.Game.Status == GameStatus.SingleFinished)
    {
        <h2>La partie est terminée</h2>
        <br />
    }
    else
    {
        <h3>@playerTurn</h3>
    }
    @foreach (var pseudoChromino in Model.PseudosChrominos)
    {
        string pseudo = pseudoChromino.Key;
        if (pseudo == ViewBag.PlayerPseudo)
            pseudo = "Vous";
        if (pseudoChromino.Value > 1)
        {
            <p>@pseudo : @pseudoChromino.Value chrominos en main</p>
        }
        else if (pseudoChromino.Value == 1)
        {
            <div class="opponentLastChromino">
                @pseudo &nbsp;
                @for (int i = 0; i < 3; i++)
                {
                    string classOpenSides;
                    switch (i)
                    {
                        case 0:
                            classOpenSides = "OpenRight";
                            break;
                        case 1:
                            classOpenSides = "OpenRightLeft";
                            break;
                        case 2:
                        default:
                            classOpenSides = "OpenLeft";
                            break;
                    }
                    Color state = Model.Pseudos_LastChrominoVM[pseudoChromino.Key].SquaresViewModel[i].Color;
                    string classColor = state.ToString();
                    <div class="Square @classOpenSides @classColor"></div>
                }
            </div>
        }
        else
        {
            if (pseudoChromino.Key == ViewBag.PlayerPseudo)
            {
                <p class="winner">Vous avez gagné la partie</p>
            }
            else
            {
                <p class="winner">@pseudoChromino.Key a gagné la partie</p>
            }
        }
    }
    <br />
    @if (Model.ChrominosInStack > 1)
    {
        <p class="infoMineure">Pioche : @Model.ChrominosInStack chrominos</p>
    }
    else if (Model.ChrominosInStack == 1)
    {
        <p class="infoMineure">Pioche : 1 chromino</p>
    }
</div>

@if (TempData["PlayReturn"] != null)
{
    <div id="errorPopup" style="display:none">
        <img src="~/image/Error.svg" height="80" width="80" alt="erreur" />
        @switch ((PlayReturn)TempData["PlayReturn"])
        {
            case PlayReturn.NotFree:
                <p id="errorMessage">L'emplacement où vous posez votre chromino n'est pas libre</p>
                break;
            case PlayReturn.DifferentColorsAround:
                <p id="errorMessage">Les cotés de votre chromino ne peuvent pas toucher des couleurs différentes</p>
                break;
            case PlayReturn.NotTwoOrMoreSameColors:
                <p id="errorMessage">Au moins 2 cotés de votre chromino doivent toucher un chromino en jeu</p>
                break;
            case PlayReturn.LastChrominoIsCameleon:
                <p id="errorMessage">Vous ne pouvez pas jouer un chromino caméléon en dernier. Vous devez piocher</p>
                break;
            case PlayReturn.NotPlayerTurn:
                <p id="errorMessage">Vous avez déjà joué. Attendez votre tour</p>
                break;
        }
        <p style="text-align:center">Merci de rejouer</p>
    </div>
    <script>
        $(document).ready(function () {
            ShowPopup('#errorPopup');
        });
    </script>
}
else
{
    <div id="errorPopup" style="display:none">
        <img src="~/image/Error.svg" height="80" width="80" alt="erreur" />
        <p id="errorMessage"></p>
        <p id="errorMessageEnd" style="text-align:center">Merci de rejouer</p>
    </div>
}

<div id="MemoPopup" class="popup-memochat" style="display:none">
    <div>
        <form asp-action="Add" asp-controller="Memo">
            <div asp-validation-summary="All" class="text-danger"></div>
            <div class="form-group">
                <input name="gameId" value="@Model.Game.Id" type="hidden" />
                <input name="playerId" value="@ViewBag.PlayerId" type="hidden" />
                <label asp-for="GamePlayerIdentified.Memo"></label>
                <textarea asp-for="GamePlayerIdentified.Memo" name="memo" class="form-control" rows="15" placeholder="Mémo (visible seulement par vous)">@Model.GamePlayerIdentified.Memo</textarea>
                <span asp-validation-for="GamePlayerIdentified.Memo" class="text-danger"></span>
            </div>
            <div class="form-group">
                <button type="submit" class="btn btn-primary">Enregistrer</button>
            </div>
        </form>
    </div>
</div>

<div id="ChatPopup" class="popup-memochat" style="display:none">
    <form id="form-SetReadChat" asp-action="SetRead" asp-controller="Chat" hidden>
        <input name="gameId" value="@Model.Game.Id" type="hidden" />
        <input name="playerId" value="@ViewBag.PlayerId" type="hidden" />
    </form>
    <div>
        <form asp-action="Add" asp-controller="Chat">
            <div asp-validation-summary="All" class="text-danger"></div>
            <div class="form-group">
                <input name="gameId" value="@Model.Game.Id" type="hidden" />
                <input name="playerPseudo" value="@ViewBag.PlayerPseudo" type="hidden" />
                <label asp-for="Game.Chat"></label>
                <textarea id="ChatPopup-textarea" class="form-control" rows="14" disabled>@Model.Game.Chat</textarea>
                <button id="ChatPopup-Read" form="form-SetReadChat" type="submit" class="btn btn-primary" style="display:none">Messages lus</button>
            </div>
            <div class="form-group">
                <input name="chat" class="form-control" placeholder="Ajouter un message (pour tous)" required />
                <span asp-validation-for="Game.Chat" class="text-danger"></span>
                <button id="ChatPopup-Submit" type="submit" class="btn btn-primary">Envoyer</button>
            </div>
        </form>
    </div>
</div>

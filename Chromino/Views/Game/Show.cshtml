@using Data.Enumeration;
@using  Data.ViewModel;

@model GameVM;
@{
    Layout = null;
    ViewData["Title"] = "Chromino - Play !";
    string gameStatus = "";
    string playerTurn = "";
}

<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>@ViewData["Title"]</title>
    <link rel="stylesheet" href="~/lib/bootstrap/dist/css/bootstrap.min.css" />
    <link rel="stylesheet" href="~/css/site.css" />
</head>

<body id="GameBody">
    <div id="toolbar">
        <div>
            <a asp-area="" asp-controller="Home" asp-action="Index"><input type="button" class="btn btn-primary" value="Home" /></a>
        </div>

        <div>
            <button class="btn btn-primary" onclick="ShowInfoPopup();">Infos</button>
        </div>

        <br />

        @switch (Model.GameStatus)
        {
            case GameStatus.Finished:
                gameStatus = "finished";
                break;
            case GameStatus.InProgress:
            default:
                gameStatus = "in progress";
                if (Model.PlayerPseudoTurn == ViewBag.PlayerPseudo)
                {
                    playerTurn = "It's up to you";
                    @if (Model.ChrominosInStack > 0 && (!Model.GamePlayerTurn.PreviouslyDraw || Model.Pseudos_Chrominos.Count == 0))
                    {
                        <form id="FormDrawChromino" asp-action="DrawChromino">
                            <input name="playerId" value="@ViewBag.PlayerId" type="hidden" />
                            <input name="gameId" value="@Model.GameId" type="hidden" />
                            <input type="submit" class="btn btn-primary" value="Draw" />
                        </form>
                    }
                    else if (Model.Pseudos_Chrominos.Count > 0)
                    {
                        <form id="FormPassTurn" asp-action="PassTurn">
                            <input name="playerId" value="@ViewBag.PlayerId" type="hidden" />
                            <input name="gameId" value="@Model.GameId" type="hidden" />
                            <input type="submit" class="btn btn-primary" value="Pass turn" />
                        </form>
                    }
                }
                else
                {
                    playerTurn = $"it's up to {@Model.PlayerPseudoTurn} to play";
                }
                break;
        }


        @if (Model.BotsId.Contains(Model.PlayerIdTurn) && Model.GameStatus != GameStatus.Finished)
        {
            <div class="row">
                <div class="col-md-4">
                    <form asp-action="AutoPlay">
                        <input name="gameId" type="hidden" value="@Model.GameId" />
                        <input name="botId" type="hidden" value="@Model.PlayerIdTurn" />
                        <div>
                            <input type="checkbox" name="autoPlay" id="autoPlay" value="true" unchecked>
                            <label for="autoPlay">Autoplay</label>
                        </div>
                        <input type="submit" value="play bot" class="btn btn-primary" />
                    </form>
                </div>
            </div>
        }
        @if (Model.GameStatus == GameStatus.InProgress && Model.PlayerIdTurn == ViewBag.PlayerId &&
(Model.IdentifiedPlayerChrominosVM.Count != 1 || Model.IdentifiedPlayerChrominosVM[0].SquaresViewModel[1].State != SquareVMState.Cameleon)
)
        {
            <div class="row">
                <div class="col-md-4">
                    <button class="btn btn-primary" onclick="PutChromino();">Play</button>
                </div>
            </div>
        }
        <div id="previousNextButton">
            <div id="previousButton"></div>
            <div id="nextButton"></div>
        </div>
        <div id="PlayerHistory"></div>
    </div>
    <br>
    <div id="gameArea" display="none">
        @for (int j = 0; j < Model.LinesNumber; j++)
        {
            <div class="gameLineArea">
                @for (int i = 0; i < Model.ColumnsNumber; i++)
                {
                    int index = i + j * Model.ColumnsNumber;
                    OpenEdge openEdge = Model.SquaresViewModel[index].Edge;
                    SquareVMState state = Model.SquaresViewModel[index].State;

                    if (state != SquareVMState.Free)
                    {
                        string classColor = state.ToString();
                        string classOpenEdge = "Square Open" + openEdge.ToString();
                        <div id="Grid_@index" class="@classOpenEdge @classColor"></div>
                    }
                    else
                    {
                        string classCloseEdge = "Square ";
                        if (i < Model.ColumnsNumber - 1 && Model.SquaresViewModel[i + 1 + j * Model.ColumnsNumber].State != SquareVMState.Free)
                        {
                            classCloseEdge += " Close" + OpenEdge.Right.ToString();
                        }
                        if (j < Model.LinesNumber - 1 && Model.SquaresViewModel[i + (j + 1) * Model.ColumnsNumber].State != SquareVMState.Free)
                        {
                            classCloseEdge += " Close" + OpenEdge.Bottom.ToString();
                        }
                        if (i > 0 && Model.SquaresViewModel[i - 1 + j * Model.ColumnsNumber].State != SquareVMState.Free)
                        {
                            classCloseEdge += " Close" + OpenEdge.Left.ToString();
                        }
                        if (j > 0 && Model.SquaresViewModel[i + (j - 1) * Model.ColumnsNumber].State != SquareVMState.Free)
                        {
                            classCloseEdge += " Close" + OpenEdge.Top.ToString();
                        }
                        <div class="@classCloseEdge"></div>
                    }
                }
            </div>
        }
    </div>
    @foreach (ChrominoVM chrominosViewModel in Model.IdentifiedPlayerChrominosVM)
    {
        string id = chrominosViewModel.ChrominoId.ToString();
        <div id="@id" class="handPlayerChromino">
            @for (int i = 0; i < 3; i++)
            {
                OpenEdge openEdge = chrominosViewModel.SquaresViewModel[i].Edge;
                SquareVMState state = chrominosViewModel.SquaresViewModel[i].State;
                string classColor = state.ToString();
                string classOpenEdge = "Open" + openEdge.ToString();
                <div class="Square @classOpenEdge @classColor"></div>
            }
        </div>
    }
    <form id="FormSendMove" asp-action="Play" hidden>
        <input id="FormPlayerId" name="playerId" value="@ViewBag.PlayerId" />
        <input id="FormGameId" name="gameId" value="@Model.GameId" />
        <input id="FormChrominoId" name="chrominoId" />
        <input id="FormX" name="x" />
        <input id="FormY" name="y" />
        <input id="FormOrientation" name="orientation" />
    </form>



    <script>
    PreviouslyDraw = @Model.GamePlayerTurn.PreviouslyDraw.ToString().ToLower();
    @{string thisPlayerTurn = (Model.PlayerIdTurn == ViewBag.PlayerId).ToString().ToLower();}
    ThisPlayerTurn = @thisPlayerTurn;
        Squares = new Array;
        Pseudos = new Array;
    @{
        for (int iChromino = 0; iChromino < Model.ChrominosPlayedVM.Count; iChromino++)
        {
    @:Pseudos.push("@Model.PseudoChrominosPlayedVM[iChromino]");
            for (int i = 0; i < 3; i++)
            {
                int index = Model.ChrominosPlayedVM[iChromino].IndexesX[i] + Model.ChrominosPlayedVM[iChromino].IndexesY[i] * Model.ColumnsNumber;
    @:Squares.push("Grid_" + @index);
            }
        }
    }
    </script>

    @if (Model.BotsId.Contains(Model.PlayerIdTurn) && Model.AutoPlay && Model.GameStatus != GameStatus.Finished)
    {
        <script>
            window.onload = function () { continueRandomGame(); }

            function continueRandomGame() {
                location.assign("@Url.Action("PlayBot", "Game", new { id = Model.GameId, botId = Model.PlayerIdTurn})");
            }
        </script>
    }

    <script src="~/lib/jquery/dist/jquery.min.js"></script>
    <script src="~/lib/bootstrap/dist/js/bootstrap.bundle.min.js"></script>
    <script src="~/js/jquery.draggableTouch.js"></script>
    <script src="~/js/jquery.popupoverlay.min.js"></script>
    <script src="~/js/site.js" asp-append-version="true"></script>
    <script>
        var GameAreaLinesNumber = @Model.LinesNumber;
        var GameAreaColumnsNumber = @Model.ColumnsNumber;
        var XMin = @Model.XMin;
        var YMin = @Model.YMin;
    </script>
</body>
</html>


@if (!Model.GamePlayerTurn.PreviouslyDraw && (Model.Pseudos_Chrominos.ContainsValue(1) || Model.Pseudos_Chrominos.ContainsValue(0)))
{
    <script>
        $(document).ready(function () {
            ShowInfoPopup();
        });
    </script>
}
else
{
    <script>
        $(document).ready(function () {
            HideInfoPopup();
        });
    </script>
}

<div id="infoPopup">
    @if (Model.GameStatus == GameStatus.Finished)
    {
        <h2>Game is finished</h2>
        <br />
    }
    else
    {
        <h3>@playerTurn</h3>
    }

    @foreach (var pseudo_chromino in Model.Pseudos_Chrominos)
    {
        if (pseudo_chromino.Value > 1)
        {
            <p>@pseudo_chromino.Key : @pseudo_chromino.Value chrominos</p>
        }
        else if (pseudo_chromino.Value == 1)
        {
            <div class="opponentLastChromino">
                @pseudo_chromino.Key &nbsp;
                @for (int i = 0; i < 3; i++)
                {
                    OpenEdge openEdge = Model.Pseudos_LastChrominoVM[pseudo_chromino.Key].SquaresViewModel[i].Edge;
                    SquareVMState state = Model.Pseudos_LastChrominoVM[pseudo_chromino.Key].SquaresViewModel[i].State;
                    string classColor = state.ToString();
                    string classOpenEdge = "Open" + openEdge.ToString();
                    <div class="Square @classOpenEdge @classColor"></div>
                }
            </div>
        }
        else
        {
            <p>@pseudo_chromino.Key win the game</p>
        }
    }

    <br />
    @if (Model.ChrominosInStack > 1)
    {
        <p>Stack : @Model.ChrominosInStack chrominos</p>
    }
    else
    {
        <p>Stack : @Model.ChrominosInStack chromino</p>
    }
</div>
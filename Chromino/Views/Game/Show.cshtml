@using Data.Enumeration
@using  Data.ViewModel

@model GameVM
@{
    const string classFree = "Free";
    const string classPossible = "Possible";
    Layout = null;
    ViewData["Title"] = "Chromino - Jouer";
    string playerTurn = "";
    Dictionary<string, int> pseudosExceptCurrentPlayer_Chrominos = new Dictionary<string, int>(Model.PseudosChrominos);
    pseudosExceptCurrentPlayer_Chrominos.Remove("Vous");
    PlayReturn playReturn = TempData["PlayReturn"] == null ? PlayReturn.Ok : (PlayReturn)TempData["PlayReturn"];
    int memosNumbers = 0;
    int notReadMessages = 0;
    if (Model.GamePlayer != null)
    {
        memosNumbers = Model.GamePlayer.Memo == null ? 0 : Model.GamePlayer.Memo.Count(x => x == '\n') + 1;
        notReadMessages = Model.GamePlayer.NotReadMessages;
    }
}

<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>@ViewData["Title"]</title>
    <partial name="_IncludeCss" />
</head>
<body>
    <partial name="_NoScript" />
    <div id="toolbar">
        <a class="btn btn-toolbar btn-home" asp-controller="Home" asp-action="Index"></a>
        <button id="buttonInfo" class="btn btn-toolbar btn-infogame" onclick="ShowPopup('#infoPopup');"></button>
        @if (Model.Player.Help > 0 && !Model.ShowPossiblesPositions && !Model.Game.Status.IsFinish())
        {
            <form id="FormHelp" asp-action="Help" style="display:none">
                <input name="gameId" value="@Model.Game.Id" />
            </form>
            <button type="submit" form="FormHelp" class="btn btn-toolbar btn-helpPlay">
                <p id="HelpNumber" class="notification notification-green">@Model.Player.Help</p>
            </button>
        }
        @if (!Model.OpponenentsAreBots)
        {
            <button class="btn btn-toolbar btn-chat" onclick="ShowPopup('#ChatPopup');">
                <p id="NotifChat" class="notification notification-red" style="display:none"></p>
            </button>
        }
        <button class="btn btn-toolbar btn-memo" onclick="ShowPopup('#MemoPopup');">
            <p id="NotifMemo" class="notification notification-green" style="display:none"></p>
        </button>
        @if (!Model.Game.Status.IsFinish())
        {
            if (Model.PlayerTurn.Id == Model.Player.Id)
            {
                playerTurn = "C'est à vous de jouer";
                @if (Model.ChrominosInStack > 0 && (!Model.GamePlayerTurn.PreviouslyDraw || pseudosExceptCurrentPlayer_Chrominos.Count == 0))
                {
                    <form id="FormDrawChromino" asp-action="DrawChromino" style="display:none">
                        <input name="gameId" value="@Model.Game.Id" />
                    </form>
                    <button type="submit" form="FormDrawChromino" class="btn btn-toolbar btn-draw"></button>
                }
                else if (pseudosExceptCurrentPlayer_Chrominos.Count > 0)
                {
                    <form id="FormSkip" asp-action="Skip" style="display:none">
                        <input name="gameId" value="@Model.Game.Id" />
                    </form>
                    <button type="submit" form="FormSkip" class="btn btn-toolbar btn-skip"></button>
                }
            }
            else
            {
                playerTurn = $"C'est à {@Model.PlayerTurn.UserName} de jouer";
            }
        }
        @if (!Model.Game.Status.IsFinish() && Model.PlayerTurn.Id == Model.Player.Id && (Model.PlayerChrominosVM.Count != 1 || Model.PlayerChrominosVM[0].SquaresVM[1].Color != ColorCh.Cameleon))
        {
            <button class="btn btn-toolbar btn-play" style="display:none" onclick="PlayChromino()"></button>
        }

        @if (!Model.BotsId.Contains(Model.PlayerTurn.Id) && Model.PlayerTurn.Id != Model.Player.Id || Model.Game.Status.IsFinish())
        {
            <form id="FormNextGame" asp-action="ShowNextToPlay" style="display:none">
            </form>
            <button type="submit" form="FormNextGame" class="btn btn-toolbar btn-nextgame"></button>
        }
    </div>
    <br>
    <div id="gameArea" ontouchstart="TouchStart()" ontouchmove="TouchMove()" ontouchend="TouchEnd()">
        @{
            string info = "";
            List<int> PossibleSquareIndexes = new List<int>();
            if (Model.ShowPossiblesPositions)
            {
                for (int iChromino = 0; iChromino < Model.PossiblesChrominosVM.Count; iChromino++)
                    for (int i = 0; i < 3; i++)
                        PossibleSquareIndexes.Add(Model.PossiblesChrominosVM[iChromino].IndexesX[i] + Model.PossiblesChrominosVM[iChromino].IndexesY[i] * Model.ColumnsNumber);
                if (Model.PossiblesChrominosVM.Count == 0)
                    info = "Aucun emplacement sur lequel jouer";
            }
        }
        <div id="PlayerHistory">
            <div id="previousNextButton">
                <div id="buttonPrevious"></div>
                <div id="buttonNext"></div>
                <div id="PlayerHistoryPseudo">@info</div>
            </div>
        </div>
        @for (int j = 0; j < Model.LinesNumber; j++)
        {
            <div id="Line_@j" class="gameLineArea">
                @for (int i = 0; i < Model.ColumnsNumber; i++)
                {
                    int index = i + j * Model.ColumnsNumber;
                    ColorCh color = Model.SquaresVM[index].Color;
                    if (color != ColorCh.None)
                    {
                        string classOpenSides = "Square Open";
                        if (Model.SquaresVM[index].OpenRight)
                            classOpenSides += "Right";
                        if (Model.SquaresVM[index].OpenBottom)
                            classOpenSides += "Bottom";
                        if (Model.SquaresVM[index].OpenLeft)
                            classOpenSides += "Left";
                        if (Model.SquaresVM[index].OpenTop)
                            classOpenSides += "Top";
                        string classColor = color.ToString();
                        <div id="Square_@index" class="@classOpenSides @classColor"></div>
                    }
                    else
                    {
                        string classColor = classFree;
                        if (PossibleSquareIndexes.Contains(index))
                            classColor = classPossible;
                        string classCloseEdge = "Square";
                        if (i < Model.ColumnsNumber - 1 && Model.SquaresVM[i + 1 + j * Model.ColumnsNumber].Color != ColorCh.None)
                            classCloseEdge += " CloseRight";
                        if (j < Model.LinesNumber - 1 && Model.SquaresVM[i + (j + 1) * Model.ColumnsNumber].Color != ColorCh.None)
                            classCloseEdge += " CloseBottom";
                        if (i > 0 && Model.SquaresVM[i - 1 + j * Model.ColumnsNumber].Color != ColorCh.None)
                            classCloseEdge += " CloseLeft";
                        if (j > 0 && Model.SquaresVM[i + (j - 1) * Model.ColumnsNumber].Color != ColorCh.None)
                            classCloseEdge += " CloseTop";
                        <div id="Square_@index" class="@classCloseEdge @classColor"></div>
                    }
                }
            </div>
        }
    </div>
    @foreach (ChrominoVM chrominosViewModel in Model.PlayerChrominosVM)
    {
        string id = chrominosViewModel.ChrominoId.ToString();
        <div id="@id" class="handPlayerChromino">
            @for (int i = 0; i < 3; i++)
            {
                ColorCh color = chrominosViewModel.SquaresVM[i].Color;
                string classColor = color.ToString();
                <div class="Square @classColor"></div>
            }
        </div>
    }
    <form id="FormSendMove" asp-action="Play" hidden>
        <input id="FormGameId" name="gameId" value="@Model.Game.Id" />
        <input id="FormChrominoId" name="chrominoId" />
        <input id="FormX" name="x" />
        <input id="FormY" name="y" />
        <input id="FormOrientation" name="orientation" />
        <input id="FormFlip" name="flip" />
    </form>

    @if (Model.BotsId.Contains(Model.PlayerTurn.Id) && !Model.Game.Status.IsFinish())
    {
        <script>
            window.onload = function () {
                location.assign("@Url.Action("PlayBot", "Game", new { id = Model.Game.Id, botId = Model.PlayerTurn.Id})");
            }
        </script>
    }
    <partial name="_IncludeJs" />

    @{
        const int horizontal = (int)Orientation.Horizontal;
        const int vertical = (int)Orientation.Vertical;
        bool showInfoPopup = false;
        bool showBotPlayingInfoPopup = false;
        if (!Model.ShowPossiblesPositions && (TempData["ByShowNextToPlay"] != null || Model.Game.Status.IsFinish() || (Model.PlayerTurn.Id == Model.Player.Id && !Model.GamePlayerTurn.PreviouslyDraw && TempData["PlayReturn"] == null && (pseudosExceptCurrentPlayer_Chrominos.ContainsValue(1) || pseudosExceptCurrentPlayer_Chrominos.ContainsValue(0)))))
            showInfoPopup = true;
        else if (ViewData["ShowBotPlayingInfoPopup"] != null)
            showBotPlayingInfoPopup = true;


        string HowValidateChrominoDescription = Model.TipsOn.Where(x => x.TipName == TipName.HowValidateChromino).Select(x => x.Description).FirstOrDefault();
        string HowMoveChrominoDescription = Model.TipsOn.Where(x => x.TipName == TipName.HowMoveChromino).Select(x => x.Description).FirstOrDefault();

        int HowValidateChrominoId = Model.TipsOn.Where(x => x.TipName == TipName.HowValidateChromino).Select(x => x.Id).FirstOrDefault();
        int HowMoveChrominoId = Model.TipsOn.Where(x => x.TipName == TipName.HowMoveChromino).Select(x => x.Id).FirstOrDefault();

    }

    <script>
    var PreviouslyDraw = @Model.GamePlayerTurn.PreviouslyDraw.ToString().ToLower();
    @{string thisPlayerTurn = (Model.PlayerTurn.Id == Model.Player.Id).ToString().ToLower();}
    var ThisPlayerTurn = @thisPlayerTurn;
    var GameAreaLinesNumber = @Model.LinesNumber;
    var GameAreaColumnsNumber = @Model.ColumnsNumber;
    var XMin = @Model.XMin;
    var YMin = @Model.YMin;
    var Horizontal = @horizontal;
    var Vertical = @vertical;
    var NotReadMessages = @notReadMessages;
    var MemosNumber = @memosNumbers;
    var PlayReturn = "@playReturn.ToString()";
    var ShowInfoPopup = @showInfoPopup.ToString().ToLower();
    var ShowBotPlayingInfoPopup = @showBotPlayingInfoPopup.ToString().ToLower();
    var HowValidateChrominoDescription = "@Html.Raw(HowValidateChrominoDescription)";
    var HowValidateChrominoId = @HowValidateChrominoId;
    var HowMoveChrominoDescription = "@Html.Raw(HowMoveChrominoDescription)";
    var HowMoveChrominoId = @HowMoveChrominoId;

        HowMoveChrominoId
    var Squares = new Array;
    var Pseudos = new Array;
    @{
        byte move = (byte)(Model.Game.Move - 1);
        for (int iChromino = 0; iChromino < Model.ChrominosPlayedVM.Count; iChromino++)
        {
            if (move == 0)
                break;
            while (move > Model.ChrominosPlayedVM[iChromino].Move)
            {
                string currentPseudo = Model.Pseudos[(move - 1) % Model.Pseudos.Count];
                string playerPass = currentPseudo == "Vous" ? "Vous avez passé" :  $"{currentPseudo} a passé";
                @:Pseudos.push("@playerPass");
                for (int i = 0; i < 3; i++)
                {
                    @:Squares.push("Na");
                }
                move--;
            }
            @:Pseudos.push("@Model.Pseudos[(move - 1) % Model.Pseudos.Count]");
            for (int i = 0; i < 3; i++)
            {
                int index = Model.ChrominosPlayedVM[iChromino].IndexesX[i] + Model.ChrominosPlayedVM[iChromino].IndexesY[i] * Model.ColumnsNumber;
                @:Squares.push("Square_" + @index);
            }
            move--;
        }
    }
    </script>
</body>
</html>

<div id="infoPopup" style="display:none">
    <div class="img-head img-info" title="info"></div>
    @if (Model.Game.Status.IsFinish())
    {
        <h2>La partie est terminée</h2>
        <br />
    }
    else
    {
        <h3>@playerTurn</h3>
    }
    @foreach (var pseudoChromino in Model.PseudosChrominos)
    {
        string pseudoHave = pseudoChromino.Key == "Vous" ? "Vous avez" : pseudoChromino.Key + " a";
        if (pseudoChromino.Value > 1)
        {
            <p>@pseudoHave @pseudoChromino.Value chrominos en main</p>
        }
        else if (pseudoChromino.Value == 1)
        {
            <div class="opponentLastChromino">
                @pseudoHave &nbsp;
                @for (int i = 0; i < 3; i++)
                {
                    string classOpenSides;
                    switch (i)
                    {
                        case 0:
                            classOpenSides = "OpenRight";
                            break;
                        case 1:
                            classOpenSides = "OpenRightLeft";
                            break;
                        case 2:
                        default:
                            classOpenSides = "OpenLeft";
                            break;
                    }
                    ColorCh color = Model.Pseudos_LastChrominoVM[pseudoChromino.Key].SquaresVM[i].Color;
                    string classColor = color.ToString();
                    <div class="Square @classOpenSides @classColor"></div>
                }
            </div>
        }
        else
        {
            if (pseudoChromino.Key == "Vous")
            {
                <p class="winner">Vous avez gagné la partie</p>
            }
            else
            {
                <p class="winner">@pseudoChromino.Key a gagné la partie</p>
            }
        }
    }
    <br />
    @if (Model.ChrominosInStack > 1)
    {
        <p class="minorInfo">Pioche : @Model.ChrominosInStack chrominos</p>
    }
    else if (Model.ChrominosInStack == 1)
    {
        <p class="minorInfo">Pioche : 1 chromino</p>
    }
    else
    {
        <p class="minorInfo">Il n'y a plus de chrominos dans la pioche</p>
    }
</div>
<div id="errorPopup" style="display:none">
    <div class="img-head img-error" title="erreur"></div>
    @switch (playReturn)
    {
        case PlayReturn.NotFree:
            <p id="errorMessage">L'emplacement où vous posez votre chromino n'est pas libre.</p>
            <p style="text-align:center">Merci de rejouer.</p>
            break;
        case PlayReturn.DifferentColorsAround:
            <p id="errorMessage">Les cotés de votre chromino ne peuvent pas toucher des couleurs différentes.</p>
            <p style="text-align:center">Merci de rejouer.</p>
            <img class="example" src="~/image/example/DiffSides.svg" alt="example" />
            <p style="text-align:center; font-size:small">exemple invalide et exemple valide</p>
            break;
        case PlayReturn.NotMinTwoSameColors:
            <p id="errorMessage">Au moins 2 cotés de votre chromino doivent toucher un chromino en jeu.</p>
            <p style="text-align:center">Merci de rejouer.</p>
            <img class="example" src="~/image/example/2Sides.svg" alt="example" />
            <p style="text-align:center; font-size:small">exemples valides</p>
            break;
        case PlayReturn.LastChrominoIsCameleon:
            <p id="errorMessage">Vous ne pouvez pas jouer un chromino caméléon en dernier.</p>
            <p style="text-align:center">Merci de piocher un chromino.</p>
            <img class="example" src="~/image/example/LastTurnCameleon.svg" alt="example" />
            <p style="text-align:center; font-size:small">exemple de chromino Caméléon</p>
            break;
        case PlayReturn.NotPlayerTurn:
            <p id="errorMessage">Vous avez déjà joué.</p>
            <p style="text-align:center">Merci d'attendre votre tour.</p>
            break;
        case PlayReturn.ErrorGameFinish:
            <p id="errorMessage">La partie est terminée.</p>
            <p style="text-align:center">Vous ne pouvez plus y jouer.</p>
            break;
        default:
            <p id="errorMessage"></p>
            <p id="errorMessageEnd" style="text-align:center"></p>
            break;
    }
</div>
<div id="MemoPopup" class="popup-memochat" style="display:none">
    <div>
        <form asp-action="Add" asp-controller="Memo">
            <div asp-validation-summary="All" class="text-danger"></div>
            <div class="form-group">
                <input name="gameId" value="@Model.Game.Id" type="hidden" />
                <label asp-for="GamePlayer.Memo"></label>
                <textarea asp-for="GamePlayer.Memo" name="memo" class="form-control" rows="15" placeholder="Mémo (visible seulement par vous)">@Model.GamePlayer.Memo</textarea>
                <span asp-validation-for="GamePlayer.Memo" class="text-danger"></span>
            </div>
            <div class="form-group">
                <button type="submit" class="btn btn-primary">Enregistrer</button>
            </div>
        </form>
    </div>
</div>
<div id="ChatPopup" class="popup-memochat" style="display:none">
    <form id="form-SetReadChat" asp-action="SetRead" asp-controller="Chat" hidden>
        <input name="gameId" value="@Model.Game.Id" type="hidden" />
    </form>
    <div>
        <form asp-action="Add" asp-controller="Chat">
            <div asp-validation-summary="All" class="text-danger"></div>
            <div class="form-group">
                <input name="gameId" value="@Model.Game.Id" type="hidden" />
                <label asp-for="Game.Chat"></label>
                <textarea id="ChatPopup-textarea" class="form-control" rows="10" disabled>@Model.Game.Chat</textarea>
                <button id="ChatPopup-Read" form="form-SetReadChat" type="submit" class="btn btn-primary" style="display:none">Marquer comme lu</button>
            </div>
            <div class="form-group">
                <input id="Chat-input" name="chat" class="form-control" placeholder="Ajouter un message (pour tous)" required />
                <span asp-validation-for="Game.Chat" class="text-danger"></span>
                <div class="emojis">
                    <span class="emoji">🖐️</span><span class="emoji">👍</span><span class="emoji">👎</span><span class="emoji">😀</span><span class="emoji">😇</span><span class="emoji">😎</span><span class="emoji">😁</span><span class="emoji">😜</span><span class="emoji">😂</span>
                </div>
                <div class="emojis">
                    <span class="emoji">😉</span><span class="emoji">😘</span><span class="emoji">😍</span><span class="emoji">😕</span><span class="emoji">😡</span><span class="emoji">😱</span><span class="emoji">😤</span><span class="emoji">😢</span><span class="emoji">😭</span>
                </div>
                <button id="ChatPopup-Submit" type="submit" class="btn btn-primary">Envoyer</button>
            </div>
        </form>
    </div>
</div>
<div id="botPlayingInfoPopup" class="popup-wait" style="display:none">
    <div class="img-head img-info" title="info"></div>
    <p>Le bot est en train de jouer.</p>
    <p>Merci de patienter quelques secondes...</p>
    <div class="wait"></div>
</div>
<div id="TipPopup" style="display:none">
    <div class="img-head img-info" title="info"></div>
    <div id="TipHtml"></div>
    <form id="FormDisableTip" asp-action="Off" asp-controller="Tip">
        <input name="gameId" value="@Model.Game.Id" type="hidden" />
        <input id="TipId" name="tipId" type="hidden" />
        <input id="DontShowTip" type="checkbox" />Ne plus afficher
    </form>
    <button class="btn btn-primary" onclick="ClosePopupTip('#TipPopup', '#DontShowTip');">Ok</button>
</div>

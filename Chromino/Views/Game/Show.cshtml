@using Data.Models
@using Data.ViewModel
@using Data.Enumeration
@using Tool
@model GameVM
@{
    const string classFree = "Free";
    Layout = "_LayoutShow.cshtml";
    ViewData["Title"] = "Chromino - Jouer";
    int memosNumbers = 0;
    if (Model.GamePlayer != null)
    {
        memosNumbers = Model.GamePlayer.Memo == null ? 0 : Model.GamePlayer.Memo.Count(x => x == '\n') + 1;
    }
    const int horizontal = (int)Orientation.Horizontal;
    const int vertical = (int)Orientation.Vertical;
    bool showInfoPopup = TempData["ShowInfo"] != null ? true : false;
    string haveDraw = Model.GamePlayer != null ? Model.GamePlayer.PreviouslyDraw.ToJs() : "false";
}
<div id="toolbar">
    <form id="FormHome" asp-action="Index" asp-controller="Home" style="display:none"></form>
    <button id="ButtonHome" class="doAction btn btn-toolbar img-home"></button>
    <button id="ButtonInfo" class="doAction btn btn-toolbar img-infogame"></button>
    <button id="ButtonHelp" class="doAction btn btn-toolbar img-helpPlay" style="display:none">
        <p id="HelpNumber" class="notification notification-green">@Model.Player.Help</p>
    </button>
    <button id="ButtonChat" class="doAction btn btn-toolbar img-chat" style="display:none">
        <p id="NotifChat" class="notification notification-red" style="display:none"></p>
    </button>
    <button id="ButtonMemo" class="doAction btn btn-toolbar img-memo">
        <p id="NotifMemo" class="notification notification-green" style="display:none"></p>
    </button>
    <button id="ButtonDrawChromino" class="doAction btn btn-toolbar img-draw" style="display:none"></button>
    <button id="ButtonSkipTurn" class="doAction btn btn-toolbar img-skip" style="display:none"></button>
    <button id="ButtonPlayingChromino" class="doAction btn btn-toolbar img-play" style="display:none"></button>
    <form id="FormNextGame" asp-action="ShowNextToPlay" style="display:none"></form>
    <button id="ButtonNextGame" class="doAction btn btn-toolbar img-nextgame" style="display:none"></button>
</div>
<br>
<div id="HistoryChrominos" class="doAction">
    <button id="ButtonPreviousChromino" class="btn btn-historyChromino img-previousChromino"></button>
    <button id="ButtonNextChromino" class="btn btn-historyChromino img-nextChromino"></button>
</div>
<div id="PlayerHistoryPseudo"></div>
<div id="InfoGame"></div>
<div id="GameArea">
    @for (int j = 0; j < Model.LinesNumber; j++)
    {
        <div id="Line_@j" class="gameLineArea">
            @for (int i = 0; i < Model.ColumnsNumber; i++)
            {
                int index = i + j * Model.ColumnsNumber;
                ColorCh color = Model.Squares[index].Color;
                if (color != ColorCh.None)
                {
                    string classOpenSides = "Square Open";
                    if (Model.Squares[index].OpenRight) classOpenSides += "Right";
                    if (Model.Squares[index].OpenBottom) classOpenSides += "Bottom";
                    if (Model.Squares[index].OpenLeft) classOpenSides += "Left";
                    if (Model.Squares[index].OpenTop) classOpenSides += "Top";
                    string classColor = color.ToString();
                    string doAction = "";
                    if (color == ColorCh.Cameleon)
                        doAction = "doAction";
                    <div id="Square_@index" class="@doAction @classOpenSides @classColor"></div>
                }
                else
                {
                    string classColor = classFree;
                    string classCloseEdge = "Square";
                    if (i < Model.ColumnsNumber - 1 && Model.Squares[i + 1 + j * Model.ColumnsNumber].Color != ColorCh.None) classCloseEdge += " CloseRight";
                    if (j < Model.LinesNumber - 1 && Model.Squares[i + (j + 1) * Model.ColumnsNumber].Color != ColorCh.None) classCloseEdge += " CloseBottom";
                    if (i > 0 && Model.Squares[i - 1 + j * Model.ColumnsNumber].Color != ColorCh.None) classCloseEdge += " CloseLeft";
                    if (j > 0 && Model.Squares[i + (j - 1) * Model.ColumnsNumber].Color != ColorCh.None) classCloseEdge += " CloseTop";
                    <div id="Square_@index" class="@classCloseEdge @classColor"></div>
                }
            }
        </div>
    }
</div>
<div id="Hand" class="doAction">
    @foreach (ChrominoVM chrominoVM in Model.PlayerChrominosVM)
    {
        <div id="@chrominoVM.ChrominoId" class="handPlayerChromino">
            @for (int i = 0; i < 3; i++)
            {
                ColorCh color = chrominoVM.Squares[i].Color;
                string classColor = color.ToString();
                <div class="Square @classColor"></div>
            }
        </div>
    }
</div>
@section ScriptJs
{
<script>
var UrlTipOff = '@Url.Action("Off", "Tip")';
var UrlMemoAdd = '@Url.Action("Add", "Memo")';
var UrlChatPostMessage = '@Url.Action("PostMessage", "Chat")';
var UrlChatGetMessages = '@Url.Action("GetMessages", "Chat")';
var UrlChatSetLatestReadMessages = '@Url.Action("SetLatestReadMessage", "Chat")';
var UrlPlay = '@Url.Action("Play")';
var UrlSkip = '@Url.Action("SkipTurn")';
var UrlDraw = '@Url.Action("DrawChromino")';
var UrlPlayBot = '@Url.Action("PlayBot")';
var UrlHelp = '@Url.Action("Help")';
var UrlEnd = '@Url.Action("End")';
var UrlGameInfos = '@Url.Action("Infos")';
var UrlGetInfosAfterPlaying = '@Url.Action("GetInfosAfterPlaying")';
var IsGameFinish = @Model.Game.Status.IsFinished().ToJs();
var InStack = @Model.ChrominosInStack;
var PlayerId = @Model.Player.Id ;
var HaveDraw = @haveDraw;
var PlayerTurn = { id:@Model.PlayerTurn.Id, name: "@Model.PlayerTurn.UserName", isBot:@Model.PlayerTurn.Bot.ToJs() };
var PlayersNumber = @Model.Pseudos.Count;
var GameId = @Model.Game.Id;
var HelpNumber = @Model.Player.Help;
var GameAreaLinesNumber = @Model.LinesNumber;
var GameAreaColumnsNumber = @Model.ColumnsNumber;
var XMin = @Model.XMin;
var YMin = @Model.YMin;
var Horizontal = @horizontal;
var Vertical = @vertical;
var MemosNumber = @memosNumbers;
var ShowInfoPopup = @showInfoPopup.ToJs();
var PlayErrors = new Array;
var Tips = new Array;
var HistoryChrominos = new Array;
@{
    foreach (PlayError playError in Model.PlayErrors)
    {
        @:PlayErrors.push({ name: "@playError.Name", description: "@Html.Raw(playError.Description)", illustrationPictureClass: "@playError.IllustrationPictureClass", illustrationPictureCaption: "@playError.IllustrationPictureCaption" });
    }

    foreach (Tip tip in Model.Tips)
    {
        @:Tips.push({ id: "@tip.Id", elementId: "@tip.DomElementId", headPictureClass:"@tip.HeadPictureClass", description: "@Html.Raw(tip.Description)", illustrationPictureClass: "@tip.IllustrationPictureClass" });
    }

    byte move = (byte)(Model.Game.Move - 1);
    foreach (ChrominoPlayedVM chrominosPlayedVM in Model.ChrominosPlayedVM)
    {
        string currentPseudo = Model.Pseudos[(move - 1) % Model.Pseudos.Count];
        if (chrominosPlayedVM.ChrominoId == null)
        {
            string playerPass = currentPseudo == "Vous" ? "Vous avez passé" : $"{currentPseudo} a passé";
            @:HistoryChrominos.push({ infoPlayerPlay: "@playerPass", square0: "Na", square1: "Na", square2: "Na"});
        }
        else
        {
            string playerPlay = currentPseudo == "Vous" ? "Vous avez posé" : $"{currentPseudo} a posé";
            string[] squares = new string[3];
            for (int i = 0; i < 3; i++)
            {
                squares[i] = "Square_" + (chrominosPlayedVM.IndexesX[i] + chrominosPlayedVM.IndexesY[i] * Model.ColumnsNumber).ToString();
            }
            @:HistoryChrominos.push({ infoPlayerPlay: "@playerPlay", square0: "@squares[0]", square1: "@squares[1]", square2: "@squares[2]" });
        }
        move--;
        if (move == 0)
            break;
    }
}
    </script>
}
<div id="PopupInfo" class="popup" style="display:none">
    <div class="div-head img-infogame" title="information"></div>
    <div id="PopupInfoHead"></div>
    <form id="FormRematch" asp-action="Rematch" hidden>
    </form>
    <div id="Askrematch" style="display:none">
        <div id="Askrematch-text" class="askrematch"></div>
        <button type="submit" form="FormRematch" class="btn btn-toolbar img-rematch askrematch"></button>
    </div>
    @foreach (var pseudoId in Model.PseudosIds)
    {
        <div id="Player_@pseudoId.Value"></div>
    }
    <br />
    <p id="InStack" class="minorInfo"></p>
</div>
<div id="Waiting" class="cssload-container-general" style="display:none">
    <div class="cssload-internal"><div class="cssload-ballcolor cssload-ball_1"> </div></div>
    <div class="cssload-internal"><div class="cssload-ballcolor cssload-ball_2"> </div></div>
    <div class="cssload-internal"><div class="cssload-ballcolor cssload-ball_3"> </div></div>
    <div class="cssload-internal"><div class="cssload-ballcolor cssload-ball_4"> </div></div>
</div>
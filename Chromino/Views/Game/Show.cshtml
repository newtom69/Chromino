@using Data.Enumeration;
@using  Data.ViewModel;

@model GameViewModel;
@{
    Layout = null;
    ViewData["Title"] = "Chromino - Play !";
    string gameStatus;
}

<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>@ViewData["Title"]</title>
    <link rel="stylesheet" href="~/lib/bootstrap/dist/css/bootstrap.min.css" />
    <link rel="stylesheet" href="~/css/site.css" />
</head>

<body>
    <div id="toolbar">
        <div>
            <a class="nav-link text-dark" asp-area="" asp-controller="Home" asp-action="Index">Home</a>
        </div>

        @switch (Model.GameStatus)
        {
            case GameStatus.Finished:
                gameStatus = "finished";
                break;

            case GameStatus.Aborted:
                gameStatus = "aborted";
                break;

            case GameStatus.InProgress:
                gameStatus = "in progress";
                break;

            case GameStatus.InPause:
            default:
                gameStatus = "in pause";
                break;
        }
        <p>Game is @gameStatus  -  Chrominos in game : @Model.ChrominosInGame  -  Chrominos in stack : @Model.ChrominosInStack</p>
        @for (int i = 0; i < Model.PlayerNumberChrominos.Count; i++)
        {
            <p>Player @(i + 1)  : @Model.PlayerNumberChrominos[i] in hand</p>
        }

        <div class="row">
            <div class="col-md-4">
                <form asp-action="AutoPlay">
                    <input name="gameId" type="hidden" value="@Model.GameId" />
                    <div>
                        <input type="checkbox" name="autoPlay" id="autoPlay" value="true" unchecked>
                        <label for="autoPlay">Autoplay</label>
                    </div>
                    <input type="submit" value="Play" class="btn btn-primary" />
                </form>
            </div>
        </div>
    </div>

    <div id="handPlayer">
        @foreach (ChrominoViewModel chrominosViewModel in Model.IdentifiedPlayerChrominosViewModel)
        {
            <div class="handPlayerChromino">
                @for (int i = 0; i < 3; i++)
                {
                    OpenEdge openEdge = chrominosViewModel.SquaresViewModel[i].Edge;
                    SquareViewModelState state = chrominosViewModel.SquaresViewModel[i].State;
                    string styleColor;
                    switch (state)
                    {
                        case SquareViewModelState.Free:
                            styleColor = "style=background-color:white";
                            openEdge = OpenEdge.All;
                            break;
                        case SquareViewModelState.Blue:
                            styleColor = "style=background-color:dodgerblue";
                            break;
                        case SquareViewModelState.Green:
                            styleColor = "style=background-color:green";
                            break;
                        case SquareViewModelState.Purple:
                            styleColor = "style=background-color:purple";
                            break;
                        case SquareViewModelState.Red:
                            styleColor = "style=background-color:red";
                            break;
                        case SquareViewModelState.Yellow:
                            styleColor = "style=background-color:yellow";
                            break;
                        case SquareViewModelState.Cameleon:
                        default:
                            styleColor = "style=background-color:burlywood";
                            break;
                    }
                    switch (openEdge)
                    {
                        case OpenEdge.Right:
                            <div class="squareOpenRight" @styleColor></div>
                            break;
                        case OpenEdge.Bottom:
                            <div class="squareOpenBottom" @styleColor></div>
                            break;
                        case OpenEdge.Left:
                            <div class="squareOpenLeft" @styleColor></div>
                            break;
                        case OpenEdge.Top:
                            <div class="squareOpenTop" @styleColor></div>
                            break;
                        case OpenEdge.BottomTop:
                            <div class="squareOpenTopBotom" @styleColor></div>
                            break;
                        case OpenEdge.RightLeft:
                            <div class="squareOpenLeftRight" @styleColor></div>
                            break;
                        case OpenEdge.All:
                        default:
                            <div class="squareOpenAll"></div>
                            break;
                    }
                }
            </div>
        }
    </div>

    <br>
    <div id="gameAreaLinesNumber" hidden>@Model.LinesNumber</div>
    <div id="gameAreaColumnsNumber" hidden>@Model.ColumnsNumber</div>
    <div id="gameArea">
        @for (int j = 0; j < Model.LinesNumber; j++)
        {
            <div class="gameLineArea">
                @for (int i = 0; i < Model.ColumnsNumber; i++)
                {
                    int index = i + j * Model.ColumnsNumber;
                    OpenEdge openEdge = Model.SquaresViewModel[index].Edge;

                    if (openEdge == OpenEdge.All && i < Model.ColumnsNumber - 1)
                    {
                        int rightIndex = (i + 1) + j * Model.ColumnsNumber;
                        OpenEdge rightOpenEdge = Model.SquaresViewModel[rightIndex].Edge;
                        if (Model.SquaresViewModel[rightIndex].State != SquareViewModelState.Free)
                        {
                            openEdge = OpenEdge.BottomLeftTop;
                        }
                    }
                    if (openEdge == OpenEdge.All && j < Model.LinesNumber - 1)
                    {
                        int bottomIndex = i + (j + 1) * Model.ColumnsNumber;
                        OpenEdge bottomOpenEdge = Model.SquaresViewModel[bottomIndex].Edge;
                        if (Model.SquaresViewModel[bottomIndex].State != SquareViewModelState.Free)
                        {
                            openEdge = OpenEdge.RightLeftTop;
                        }
                    }
                    else if (openEdge == OpenEdge.BottomLeftTop && j < Model.LinesNumber - 1)
                    {
                        int bottomIndex = i + (j + 1) * Model.ColumnsNumber;
                        OpenEdge bottomOpenEdge = Model.SquaresViewModel[bottomIndex].Edge;
                        if (Model.SquaresViewModel[bottomIndex].State != SquareViewModelState.Free)
                        {
                            openEdge = OpenEdge.LeftTop;
                        }
                    }

                    if (i > 0)
                    {
                        int leftIndex = (i - 1) + j * Model.ColumnsNumber;
                        OpenEdge leftOpenEdge = Model.SquaresViewModel[leftIndex].Edge;
                        if (Model.SquaresViewModel[leftIndex].State != SquareViewModelState.Free)
                        {
                            switch (openEdge)
                            {
                                case OpenEdge.Left:
                                    openEdge = OpenEdge.None;
                                    break;
                                case OpenEdge.RightLeft:
                                    openEdge = OpenEdge.Right;
                                    break;
                                case OpenEdge.All:
                                    openEdge = OpenEdge.RightBottomTop;
                                    break;
                                case OpenEdge.BottomLeftTop:
                                    openEdge = OpenEdge.BottomTop;
                                    break;
                                case OpenEdge.RightLeftTop:
                                    openEdge = OpenEdge.RightTop;
                                    break;
                                case OpenEdge.LeftTop:
                                    openEdge = OpenEdge.Top;
                                    break;
                                case OpenEdge.BottomLeft:
                                default:
                                    openEdge = OpenEdge.Bottom;
                                    break;
                            }
                        }
                    }

                    if (j > 0)
                    {
                        int topIndex = i + (j - 1) * Model.ColumnsNumber;
                        OpenEdge topOpenEdge = Model.SquaresViewModel[topIndex].Edge;
                        if (Model.SquaresViewModel[topIndex].State != SquareViewModelState.Free)
                        {
                            switch (openEdge)
                            {
                                case OpenEdge.Top:
                                    openEdge = OpenEdge.None;
                                    break;
                                case OpenEdge.BottomTop:
                                    openEdge = OpenEdge.Bottom;
                                    break;
                                case OpenEdge.All:
                                    openEdge = OpenEdge.RightBottomLeft;
                                    break;
                                case OpenEdge.BottomLeftTop:
                                    openEdge = OpenEdge.BottomLeft;
                                    break;
                                case OpenEdge.RightLeftTop:
                                    openEdge = OpenEdge.RightLeft;
                                    break;
                                case OpenEdge.LeftTop:
                                    openEdge = OpenEdge.Left;
                                    break;
                                case OpenEdge.RightTop:
                                    openEdge = OpenEdge.Right;
                                    break;
                                case OpenEdge.RightBottomTop:
                                    openEdge = OpenEdge.RightBottom;
                                    break;
                                case OpenEdge.Bottom:
                                    break;
                                case OpenEdge.Right:
                                    break;
                                case OpenEdge.None:
                                    break;
                                default:
                                    int a = 5;
                                    break;
                            }
                        }
                    }

                    SquareViewModelState state = Model.SquaresViewModel[index].State;
                    string styleColor;
                    switch (state)
                    {
                        case SquareViewModelState.Free:
                            styleColor = "style=background-color:white";
                            break;
                        case SquareViewModelState.Blue:
                            styleColor = "style=background-color:dodgerblue";
                            break;
                        case SquareViewModelState.Green:
                            styleColor = "style=background-color:green";
                            break;
                        case SquareViewModelState.Purple:
                            styleColor = "style=background-color:purple";
                            break;
                        case SquareViewModelState.Red:
                            styleColor = "style=background-color:red";
                            break;
                        case SquareViewModelState.Yellow:
                            styleColor = "style=background-color:yellow";
                            break;
                        case SquareViewModelState.Cameleon:
                        default:
                            styleColor = "style=background-color:burlywood";
                            break;
                    }
                    switch (openEdge)
                    {
                        case OpenEdge.Right:
                            <div class="squareOpenRight" @styleColor></div>
                            break;
                        case OpenEdge.Bottom:
                            <div class="squareOpenBottom" @styleColor></div>
                            break;
                        case OpenEdge.Left:
                            <div class="squareOpenLeft" @styleColor></div>
                            break;
                        case OpenEdge.Top:
                            <div class="squareOpenTop" @styleColor></div>
                            break;
                        case OpenEdge.BottomTop:
                            <div class="squareOpenTopBotom" @styleColor></div>
                            break;
                        case OpenEdge.RightLeft:
                            <div class="squareOpenLeftRight" @styleColor></div>
                            break;
                        case OpenEdge.LeftTop:
                            <div class="squareOpenLeftTop" @styleColor></div>
                            break;
                        case OpenEdge.BottomLeftTop:
                            <div class="squareOpenBottomLeftTop" @styleColor></div>
                            break;
                        case OpenEdge.RightLeftTop:
                            <div class="squareOpenRightLeftTop" @styleColor></div>
                            break;
                        case OpenEdge.None:
                            <div class="squareOpenNone" @styleColor></div>
                            break;
                        case OpenEdge.RightTop:
                            <div class="squareOpenRightTop" @styleColor></div>
                            break;
                        case OpenEdge.RightBottomTop:
                            <div class="squareOpenRightBottomTop" @styleColor></div>
                            break;
                        case OpenEdge.RightBottom:
                            <div class="squareOpenRightBottom" @styleColor></div>
                            break;
                        case OpenEdge.All:
                            <div class="squareOpenAll"></div>
                            break;
                        case OpenEdge.BottomLeft:
                            <div class="squareOpenBottomLeft" @styleColor></div>
                            break;
                        case OpenEdge.RightBottomLeft:
                            <div class="squareOpenRightBottomLeft" @styleColor></div>
                            break;
                        default:
                            int a = 55;
                            break;
                    }
                }
            </div>
        }
    </div>

    @if (Model.AutoPlay == true && (Model.GameStatus != GameStatus.Finished && Model.GameStatus != GameStatus.Aborted))
    {
        <script>
            window.onload = function () { continueRandomGame(); }

            function continueRandomGame() {
                location.assign("@Url.Action("ContinueRandomGame", "Game", new { id = Model.GameId })");
            }
        </script>
    }

    <script src="~/lib/jquery/dist/jquery.min.js"></script>
    <script src="~/lib/bootstrap/dist/js/bootstrap.bundle.min.js"></script>
    <script src="~/js/site.js" asp-append-version="true"></script>


</body>
</html>

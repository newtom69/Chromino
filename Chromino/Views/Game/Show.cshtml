@using Data.Models
@using Data.ViewModel
@using Data.Enumeration
@model GameVM
@{
    const string classFree = "Free";
    Layout = "_LayoutShow.cshtml";
    ViewData["Title"] = "Chromino - Jouer";
    string playerTurn = "";
    Dictionary<string, int> pseudosExceptCurrentPlayer_Chrominos = new Dictionary<string, int>(Model.PseudosChrominos);
    pseudosExceptCurrentPlayer_Chrominos.Remove("Vous");
    int memosNumbers = 0;
    int notReadMessages = 0;
    if (Model.GamePlayer != null)
    {
        memosNumbers = Model.GamePlayer.Memo == null ? 0 : Model.GamePlayer.Memo.Count(x => x == '\n') + 1;
        notReadMessages = Model.GamePlayer.NotReadMessages;
    }
    string styleButtonSkip = "display:none";
    string styleButtonDraw = "display:none";
    string styleButtonNextGame = "display:none";
}
<div id="toolbar">
    <form id="FormHome" asp-action="Index" asp-controller="Home" style="display:none"></form>
    <button id="ButtonHome" class="btn btn-toolbar img-home" onclick="Action(this.id);"></button>
    <button id="ButtonInfo" class="btn btn-toolbar img-infogame" onclick="Action(this.id);"></button>
    <button id="ButtonHelp" class="btn btn-toolbar img-helpPlay" style="display:none" onclick="Action(this.id);">
        <p id="HelpNumber" class="notification notification-green">@Model.Player.Help</p>
    </button>

    @if (!Model.OpponentsAreBots)
    {
        <button id="ButtonChat" class="btn btn-toolbar img-chat" onclick="Action(this.id);">
            <p id="NotifChat" class="notification notification-red" style="display:none">@notReadMessages</p>
        </button>
    }
    <button id="ButtonMemo" class="btn btn-toolbar img-memo" onclick="Action(this.id);">
        <p id="NotifMemo" class="notification notification-green" style="display:none"></p>
    </button>

    @if (!Model.Game.Status.IsFinished())
    {
        if (Model.PlayerTurn.Id == Model.Player.Id)
        {
            playerTurn = "C'est à vous de jouer";
            @if (Model.ChrominosInStack > 0 && (!Model.GamePlayerTurn.PreviouslyDraw || pseudosExceptCurrentPlayer_Chrominos.Count == 0))
                styleButtonDraw = "display:initial";
            else if (pseudosExceptCurrentPlayer_Chrominos.Count > 0)
                styleButtonSkip = "display:initial";
        }
        else
        {
            playerTurn = $"C'est à {@Model.PlayerTurn.UserName} de jouer";
        }
    }
    <button id="ButtonDrawChromino" class="btn btn-toolbar img-draw" style="@styleButtonDraw" onclick="Action(this.id);"></button>
    <button id="ButtonSkipTurn" class="btn btn-toolbar img-skip" style="@styleButtonSkip" onclick="Action(this.id);"></button>

    @if (!Model.Game.Status.IsFinished() && Model.PlayerTurn.Id == Model.Player.Id && (Model.PlayerChrominosVM.Count != 1 || Model.PlayerChrominosVM[0].SquaresVM[1].Color != ColorCh.Cameleon))
    {
        <button id="ButtonPlayChromino" class="btn btn-toolbar img-play" style="display:none" onclick="Action(this.id);"></button>
    }
    @if (!Model.BotsId.Contains(Model.PlayerTurn.Id) && Model.PlayerTurn.Id != Model.Player.Id || Model.Game.Status.IsFinished())
        styleButtonNextGame = "display:initial";
    <form id="FormNextGame" asp-action="ShowNextToPlay" style="display:none"></form>
    <button id="ButtonNextGame" class="btn btn-toolbar img-nextgame" style="@styleButtonNextGame" onclick="Action(this.id);"></button>
</div>
<br>
<div id="HistoryChrominos" onclick="Action(this.id);">
    <button id="ButtonPreviousChromino" class="btn btn-historyChromino img-previousChromino"></button>
    <button id="ButtonNextChromino" class="btn btn-historyChromino img-nextChromino"></button>
</div>
<div id="PlayerHistoryPseudo"></div>
<div id="GameArea" ontouchstart="TouchStart()" ontouchmove="TouchMove()" ontouchend="TouchEnd()">
    @for (int j = 0; j < Model.LinesNumber; j++)
    {
        <div id="Line_@j" class="gameLineArea">
            @for (int i = 0; i < Model.ColumnsNumber; i++)
            {
                int index = i + j * Model.ColumnsNumber;
                ColorCh color = Model.SquaresVM[index].Color;
                if (color != ColorCh.None)
                {
                    string classOpenSides = "Square Open";
                    if (Model.SquaresVM[index].OpenRight) classOpenSides += "Right";
                    if (Model.SquaresVM[index].OpenBottom) classOpenSides += "Bottom";
                    if (Model.SquaresVM[index].OpenLeft) classOpenSides += "Left";
                    if (Model.SquaresVM[index].OpenTop) classOpenSides += "Top";
                    string classColor = color.ToString();
                    string onclick = "";
                    if (color == ColorCh.Cameleon)
                        onclick = "onclick=Action('Cameleon');";
                    <div id="Square_@index" class="@classOpenSides @classColor" @onclick></div>
                }
                else
                {
                    string classColor = classFree;
                    string classCloseEdge = "Square";
                    if (i < Model.ColumnsNumber - 1 && Model.SquaresVM[i + 1 + j * Model.ColumnsNumber].Color != ColorCh.None) classCloseEdge += " CloseRight";
                    if (j < Model.LinesNumber - 1 && Model.SquaresVM[i + (j + 1) * Model.ColumnsNumber].Color != ColorCh.None) classCloseEdge += " CloseBottom";
                    if (i > 0 && Model.SquaresVM[i - 1 + j * Model.ColumnsNumber].Color != ColorCh.None) classCloseEdge += " CloseLeft";
                    if (j > 0 && Model.SquaresVM[i + (j - 1) * Model.ColumnsNumber].Color != ColorCh.None) classCloseEdge += " CloseTop";
                    <div id="Square_@index" class="@classCloseEdge @classColor"></div>
                }
            }
        </div>
    }
</div>
<div id="Hand" onclick="Action(this.id);">
    @foreach (ChrominoVM chrominoVM in Model.PlayerChrominosVM)
    {
        string id = chrominoVM.ChrominoId.ToString();
        <div id="@id" class="handPlayerChromino">
            @for (int i = 0; i < 3; i++)
            {
                ColorCh color = chrominoVM.SquaresVM[i].Color;
                string classColor = color.ToString();
                <div class="Square @classColor"></div>
            }
        </div>
    }
</div>

@{
    const int horizontal = (int)Orientation.Horizontal;
    const int vertical = (int)Orientation.Vertical;
    bool showInfoPopup = false;
    bool showBotPlayingInfoPopup = false;

    // todo TempData["PlayReturn"] à supprimer
    if (TempData["ByShowNextToPlay"] != null || Model.Game.Status.IsFinished() || (Model.PlayerTurn.Id == Model.Player.Id && !Model.GamePlayerTurn.PreviouslyDraw && TempData["PlayReturn"] == null && (pseudosExceptCurrentPlayer_Chrominos.ContainsValue(1) || pseudosExceptCurrentPlayer_Chrominos.ContainsValue(0))))
        showInfoPopup = true;
    else if (ViewData["ShowBotPlayingInfoPopup"] != null)
        showBotPlayingInfoPopup = true;
}

@section ScriptPreJs
{
    <script>
var UrlTipOff = '@Url.Action("Off", "Tip")';
var UrlMemoAdd = '@Url.Action("Add", "Memo")';
var UrlChatAdd = '@Url.Action("Add", "Chat")';
var UrlChatRead = '@Url.Action("Read", "Chat")';
var UrlPlay = '@Url.Action("Play")';
var UrlSkip = '@Url.Action("SkipTurn")';
var UrlDraw = '@Url.Action("DrawChromino")';
var UrlPlayBot = '@Url.Action("PlayBot")';
var UrlHelp = '@Url.Action("Help")';
var UrlEnd = '@Url.Action("End")';
var UrlPlayersIdChrominosNumber = '@Url.Action("IdsChrominosNumber", "Player")';
var UrlWaitOpponentPlayed = '@Url.Action("WaitOpponentPlayed")';
var IsGameFinish = @Model.Game.Status.IsFinished().ToString().ToLower();
var InStack = @Model.ChrominosInStack;
var PlayerId = @Model.Player.Id;
var PlayerTurnId = @Model.PlayerTurn.Id;
var PlayerTurnName = "@Model.PlayerTurn.UserName";
var IsBot = @Model.PlayerTurn.Bot.ToString().ToLower();
var PlayersNumber = @Model.Pseudos.Count;
var GameId = @Model.Game.Id;
var HelpNumber = @Model.Player.Help;
var PreviouslyDraw = @Model.GamePlayerTurn.PreviouslyDraw.ToString().ToLower();
@{string thisPlayerTurn = (Model.PlayerTurn.Id == Model.Player.Id).ToString().ToLower();}
var ThisPlayerTurn = @thisPlayerTurn;
var GameAreaLinesNumber = @Model.LinesNumber;
var GameAreaColumnsNumber = @Model.ColumnsNumber;
var XMin = @Model.XMin;
var YMin = @Model.YMin;
var Horizontal = @horizontal;
var Vertical = @vertical;
var NotReadMessages = @notReadMessages;
var MemosNumber = @memosNumbers;
var ShowInfoPopup = @showInfoPopup.ToString().ToLower();
var ShowBotPlayingInfoPopup = @showBotPlayingInfoPopup.ToString().ToLower();
var PlayErrors = new Array;
var Tips = new Array;
var HistoryChrominos = new Array;
@{
    foreach (PlayError playError in Model.PlayErrors)
    {
        @:PlayErrors.push({ name: "@playError.Name", description: "@Html.Raw(playError.Description)", illustrationPictureClass: "@playError.IllustrationPictureClass", illustrationPictureCaption: "@playError.IllustrationPictureCaption" });
    }

    foreach (Tip tip in Model.Tips)
    {
        @:Tips.push({ id: "@tip.Id", elementId: "@tip.DomElementId", headPictureClass:"@tip.HeadPictureClass", description: "@Html.Raw(tip.Description)", illustrationPictureClass: "@tip.IllustrationPictureClass" });
    }

    byte move = (byte)(Model.Game.Move - 1);
    for (int iChromino = 0; iChromino < Model.ChrominosPlayedVM.Count; iChromino++)
    {
        if (move == 0)
            break;
        while (move > Model.ChrominosPlayedVM[iChromino].Move)
        {
            string currentPseudo = Model.Pseudos[(move - 1) % Model.Pseudos.Count];
            string playerPass = currentPseudo == "Vous" ? "Vous avez passé" : $"{currentPseudo} a passé";
            @:HistoryChrominos.push({ playerName: "@playerPass", square0: "Na", square1: "Na", square2: "Na"});
            move--;
        }
        string[] squares = new string[3];
        for (int i = 0; i < 3; i++)
            squares[i] = "Square_" + (Model.ChrominosPlayedVM[iChromino].IndexesX[i] + Model.ChrominosPlayedVM[iChromino].IndexesY[i] * Model.ColumnsNumber).ToString();
        @:HistoryChrominos.push({ playerName: "@Model.Pseudos[(move - 1) % Model.Pseudos.Count]", square0: "@squares[0]", square1: "@squares[1]", square2: "@squares[2]" });
        move--;
    }
}
    </script>
}
<div id="PopupInfo" class="popup" style="display:none">
    <div class="div-head img-infogame" title="information"></div>
    <div id="PopupInfoHead"></div>
    <form id="FormRematch" asp-action="Rematch" hidden>
        <input name="playersName" value="@Model.Player.UserName" />
        @foreach (var pseudo_chromino in pseudosExceptCurrentPlayer_Chrominos)
        {
            <input name="playersName" value="@pseudo_chromino.Key" />
        }
    </form>
    <div id="AskRematch" style="display:none">
        <div class="askrematch">faire la revanche ?</div>
        <button type="submit" form="FormRematch" class="btn btn-toolbar img-rematch askrematch"></button>
    </div>
    @foreach (var pseudoId in Model.PseudosIds)
    {
        <div id="Player_@pseudoId.Value"></div>
    }
    <br />
    <p id="InStack" class="minorInfo"></p>
</div>
<div id="PopupError" class="popup" style="display:none">
    <div class="div-head div-error" title="erreur"></div>
    <p id="ErrorText"></p>
    <div class="illustrations">
        <div id="ErrorIllustration" title="illustration"></div>
    </div>
    <p id="ErrorIllustrationCaption" title="légende"></p>
</div>
<div id="PopupMemo" class="popup popup-memochat" style="display:none">
    <div class="div-head img-memo" title="mémo"></div>
    <textarea id="MemoContent" asp-for="GamePlayer.Memo" name="memo" class="form-control" rows="15" placeholder="Mémo (visible seulement par vous)">@Model.GamePlayer.Memo</textarea>
    <div class="form-group">
        <button id="MemoAdd" class="btn btn-primary" onclick="AddMemo();">Enregistrer</button>
    </div>
</div>
<div id="PopupChat" class="popup popup-memochat" style="display:none">
    <div class="div-head img-chat" title="chat"></div>
    <div>
        <textarea id="ChatPopupContent" class="form-control" rows="10" disabled>@Model.Game.Chat</textarea>
        <div class="form-group">
            <input id="ChatInput" name="chat" class="form-control" placeholder="Ajouter un message (pour tous)" required />
            <div class="emojis">
                <span class="emoji">🖐️</span><span class="emoji">👍</span><span class="emoji">👎</span><span class="emoji">😀</span><span class="emoji">😇</span><span class="emoji">😎</span><span class="emoji">😁</span><span class="emoji">😜</span><span class="emoji">😂</span>
            </div>
            <div class="emojis">
                <span class="emoji">😉</span><span class="emoji">😘</span><span class="emoji">😍</span><span class="emoji">😕</span><span class="emoji">😡</span><span class="emoji">😱</span><span class="emoji">😤</span><span class="emoji">😢</span><span class="emoji">😭</span>
            </div>
            <button id="ChatAdd" class="btn btn-primary" onclick="AddChat();">Envoyer</button>
        </div>
    </div>
</div>
<div id="TipPopup" class="popup" style="display:none">
    <div id="TipHeadPicture" class="div-head" title="didacticiel"></div>
    <div id="TipHtml"></div>
    <div class="illustrations">
        <div id="TipIllustration" title="illustration"></div>
    </div>
    <input id="TipDontShowAgain" type="checkbox" /> Ne plus afficher cette fenêtre
    <div><input name="dontShowAllTips" type="checkbox" /> Ne plus afficher aucune fenêtre du didacticiel</div>
    <button class="btn btn-primary btn-tip" onclick="TipClosePopup('#TipPopup', '#TipDontShowAgain');">C'est noté !</button>
</div>
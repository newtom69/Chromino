@using Data.Enumeration;
@using  Data.ViewModel;

@model GameVM;
@{
    Layout = null;
    ViewData["Title"] = "Chromino - Play !";
    string gameStatus;
}

<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>@ViewData["Title"]</title>
    <link rel="stylesheet" href="~/lib/bootstrap/dist/css/bootstrap.min.css" />
    <link rel="stylesheet" href="~/css/site.css" />
</head>

<body id="GameBody">
    <div id="toolbar">
        <div>
            <a class="nav-link text-dark" asp-area="" asp-controller="Home" asp-action="Index">Home</a>
        </div>
        @switch (Model.GameStatus)
        {
            case GameStatus.Finished:
                gameStatus = "finished";
                break;
            case GameStatus.InProgress:
            default:
                gameStatus = "in progress";
                if (Model.PlayerPseudoTurn == ViewBag.PlayerPseudo)
                {
                    <p>Your turn</p>
                    @if (Model.ChrominosInStack > 0 && (!Model.GamePlayerTurn.PreviouslyDraw || Model.Pseudos_Chrominos.Count == 1))
                    {
                        <form id="FormDrawChromino" asp-action="DrawChromino">
                            <input name="playerId" value="@ViewBag.PlayerId" type="hidden" />
                            <input name="gameId" value="@Model.GameId" type="hidden" />
                            <input type="submit" class="btn btn-primary" value="Draw" />
                        </form>
                    }
                    else if (Model.Pseudos_Chrominos.Count > 1)
                    {
                        <form id="FormPassTurn" asp-action="PassTurn">
                            <input name="playerId" value="@ViewBag.PlayerId" type="hidden" />
                            <input name="gameId" value="@Model.GameId" type="hidden" />
                            <input type="submit" class="btn btn-primary" value="Pass turn" />
                        </form>
                    }
                }
                else
                {
                    <p>@Model.PlayerPseudoTurn turn</p>
                }
                break;
        }

        <p>Game is @gameStatus - Stack : @Model.ChrominosInStack</p>

        @foreach (var pseudo_chromino in Model.Pseudos_Chrominos)
        {
            if (pseudo_chromino.Key != ViewBag.PlayerPseudo)
            {
                <p>@pseudo_chromino.Key : @pseudo_chromino.Value in hand</p>
            }
        }

        @if (Model.BotsId.Contains(Model.PlayerIdTurn) && Model.GameStatus != GameStatus.Finished)
        {
            <div class="row">
                <div class="col-md-4">
                    <form asp-action="AutoPlay">
                        <input name="gameId" type="hidden" value="@Model.GameId" />
                        <input name="botId" type="hidden" value="@Model.PlayerIdTurn" />
                        <div>
                            <input type="checkbox" name="autoPlay" id="autoPlay" value="true" unchecked>
                            <label for="autoPlay">Autoplay</label>
                        </div>
                        <input type="submit" value="play bot" class="btn btn-primary" />
                    </form>
                </div>
            </div>
        }
        @if (Model.GameStatus == GameStatus.InProgress && Model.PlayerIdTurn == ViewBag.PlayerId && 
            (Model.IdentifiedPlayerChrominosVM.Count != 1 || Model.IdentifiedPlayerChrominosVM[0].SquaresViewModel[2].State != SquareVMState.Cameleon)
           )
        {
            <div class="row">
                <div class="col-md-4">
                    <button class="btn btn-primary" onclick="PutChromino();">Play</button>
                </div>
            </div>
        }
    </div>
    <br>
    <div id="gameAreaLinesNumber" hidden>@Model.LinesNumber</div>
    <div id="gameAreaColumnsNumber" hidden>@Model.ColumnsNumber</div>
    <div id="gameArea" display="none">
        @for (int j = 0; j < Model.LinesNumber; j++)
        {
            <div class="gameLineArea">
                @for (int i = 0; i < Model.ColumnsNumber; i++)
                {
                    int index = i + j * Model.ColumnsNumber;
                    OpenEdge openEdge = Model.SquaresViewModel[index].Edge;
                    SquareVMState state = Model.SquaresViewModel[index].State;

                    if (state != SquareVMState.Free)
                    {
                        string classColor = state.ToString();
                        string classOpenEdge = "Open" + openEdge.ToString();
                        <div class="Square @classOpenEdge @classColor"></div>
                    }
                    else
                    {
                        openEdge = OpenEdge.None;
                        if (i < Model.ColumnsNumber - 1)
                        {
                            int rightIndex = (i + 1) + j * Model.ColumnsNumber;
                            OpenEdge rightOpenEdge = Model.SquaresViewModel[rightIndex].Edge;
                            if (Model.SquaresViewModel[rightIndex].State != SquareVMState.Free)
                            {
                                openEdge = OpenEdge.Right;
                            }
                        }
                        if (j < Model.LinesNumber - 1)
                        {
                            int bottomIndex = i + (j + 1) * Model.ColumnsNumber;
                            OpenEdge bottomOpenEdge = Model.SquaresViewModel[bottomIndex].Edge;
                            if (Model.SquaresViewModel[bottomIndex].State != SquareVMState.Free)
                            {
                                switch (openEdge)
                                {
                                    case OpenEdge.None:
                                        openEdge = OpenEdge.Bottom;
                                        break;
                                    case OpenEdge.Right:
                                        openEdge = OpenEdge.RightBottom;
                                        break;
                                }
                            }
                        }
                        if (i > 0)
                        {
                            int leftIndex = (i - 1) + j * Model.ColumnsNumber;
                            OpenEdge leftOpenEdge = Model.SquaresViewModel[leftIndex].Edge;
                            if (Model.SquaresViewModel[leftIndex].State != SquareVMState.Free)
                            {
                                switch (openEdge)
                                {
                                    case OpenEdge.None:
                                        openEdge = OpenEdge.Left;
                                        break;
                                    case OpenEdge.Right:
                                        openEdge = OpenEdge.RightLeft;
                                        break;
                                    case OpenEdge.Bottom:
                                        openEdge = OpenEdge.BottomLeft;
                                        break;
                                    case OpenEdge.RightBottom:
                                        openEdge = OpenEdge.RightBottomLeft;
                                        break;
                                }
                            }
                        }
                        if (j > 0)
                        {
                            int topIndex = i + (j - 1) * Model.ColumnsNumber;
                            OpenEdge topOpenEdge = Model.SquaresViewModel[topIndex].Edge;
                            if (Model.SquaresViewModel[topIndex].State != SquareVMState.Free)
                            {
                                switch (openEdge)
                                {
                                    case OpenEdge.None:
                                        openEdge = OpenEdge.Top;
                                        break;
                                    case OpenEdge.Right:
                                        openEdge = OpenEdge.RightTop;
                                        break;
                                    case OpenEdge.Bottom:
                                        openEdge = OpenEdge.BottomTop;
                                        break;
                                    case OpenEdge.RightBottom:
                                        openEdge = OpenEdge.RightBottomTop;
                                        break;
                                    case OpenEdge.Left:
                                        openEdge = OpenEdge.LeftTop;
                                        break;
                                    case OpenEdge.RightLeft:
                                        openEdge = OpenEdge.RightLeftTop;
                                        break;
                                    case OpenEdge.BottomLeft:
                                        openEdge = OpenEdge.BottomLeftTop;
                                        break;
                                    case OpenEdge.RightBottomLeft:
                                        openEdge = OpenEdge.All;
                                        break;
                                }
                            }
                        }
                        string classCloseEdge = "Close" + openEdge.ToString();
                        <div class="Square @classCloseEdge"></div>
                    }
                }
            </div>
        }
    </div>
    <div id="handPlayer">
        @{
            int offset = 5;
            foreach (ChrominoVM chrominosViewModel in Model.IdentifiedPlayerChrominosVM)
            {
                string id = chrominosViewModel.ChrominoId.ToString();
                <div id="@id" class="handPlayerChromino" style="top:@(offset)px">
                    @for (int i = 0; i < 3; i++)
                    {
                        OpenEdge openEdge = chrominosViewModel.SquaresViewModel[i].Edge;
                        SquareVMState state = chrominosViewModel.SquaresViewModel[i].State;
                        string classColor = state.ToString();
                        string classOpenEdge = "Open" + openEdge.ToString();
                        <div class="Square @classOpenEdge @classColor"></div>
                    }
                </div>
                offset += 33;
            }
        }
    </div>
    <form id="FormSendMove" asp-action="Play" hidden>
        <input id="FormPlayerId" name="playerId" value="@ViewBag.PlayerId" />
        <input id="FormGameId" name="gameId" value="@Model.GameId" />
        <input id="FormChrominoId" name="chrominoId" />
        <input id="FormX" name="x" />
        <input id="FormY" name="y" />
        <input id="FormOrientation" name="orientation" />
    </form>

    @if (Model.BotsId.Contains(Model.PlayerIdTurn) && Model.AutoPlay && Model.GameStatus != GameStatus.Finished)
    {
        <script>
            window.onload = function () { continueRandomGame(); }

            function continueRandomGame() {
                location.assign("@Url.Action("PlayBot", "Game", new { id = Model.GameId, botId = Model.PlayerIdTurn})");
            }
        </script>
    }

    <script src="~/lib/jquery/dist/jquery.min.js"></script>
    <script src="~/lib/bootstrap/dist/js/bootstrap.bundle.min.js"></script>
    <script src="~/js/jquery.draggableTouch.js"></script>
    <script src="~/js/site.js" asp-append-version="true"></script>
    <script>
        var gameAreaLinesNumber = @Model.LinesNumber;
        var gameAreaColumnsNumber = @Model.ColumnsNumber;
        var XMin = @Model.XMin;
        var YMin = @Model.YMin;
    </script>
</body>
</html>
